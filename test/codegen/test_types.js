//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var listings_ttypes = require('./listings_types');


var ttypes = module.exports = {};
var Work = module.exports.Work = function(args) {
  this.num1 = 0;
  this.num2 = null;
  this.comment = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field num2 is unset!');
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
Work.prototype = {};
Work.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Work.prototype.write = function(output) {
  output.writeStructBegin('Work');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I32, 1);
    output.writeI32(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I32, 2);
    output.writeI32(this.num2);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FirstName = module.exports.FirstName = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
FirstName.prototype = {};
FirstName.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FirstName.prototype.write = function(output) {
  output.writeStructBegin('FirstName');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LastName = module.exports.LastName = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
LastName.prototype = {};
LastName.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LastName.prototype.write = function(output) {
  output.writeStructBegin('LastName');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Name = module.exports.Name = function(args) {
  this.first_name = null;
  this.last_name = null;
  if (args) {
    if (args.first_name !== undefined && args.first_name !== null) {
      this.first_name = new ttypes.FirstName(args.first_name);
    }
    if (args.last_name !== undefined && args.last_name !== null) {
      this.last_name = new ttypes.LastName(args.last_name);
    }
  }
};
Name.prototype = {};
Name.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.first_name = new ttypes.FirstName();
        this.first_name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.last_name = new ttypes.LastName();
        this.last_name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Name.prototype.write = function(output) {
  output.writeStructBegin('Name');
  if (this.first_name !== null && this.first_name !== undefined) {
    output.writeFieldBegin('first_name', Thrift.Type.STRUCT, 1);
    this.first_name.write(output);
    output.writeFieldEnd();
  }
  if (this.last_name !== null && this.last_name !== undefined) {
    output.writeFieldBegin('last_name', Thrift.Type.STRUCT, 2);
    this.last_name.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Everything = module.exports.Everything = function(args) {
  this.byte_val = null;
  this.i16_val = null;
  this.i32_val = null;
  this.i64_val = null;
  this.set_val = null;
  this.list_val = null;
  this.map_val = null;
  this.string_val = null;
  this.bool_val = null;
  this.double_val = null;
  if (args) {
    if (args.byte_val !== undefined && args.byte_val !== null) {
      this.byte_val = args.byte_val;
    }
    if (args.i16_val !== undefined && args.i16_val !== null) {
      this.i16_val = args.i16_val;
    }
    if (args.i32_val !== undefined && args.i32_val !== null) {
      this.i32_val = args.i32_val;
    }
    if (args.i64_val !== undefined && args.i64_val !== null) {
      this.i64_val = args.i64_val;
    }
    if (args.set_val !== undefined && args.set_val !== null) {
      this.set_val = Thrift.copyList(args.set_val, [null]);
    }
    if (args.list_val !== undefined && args.list_val !== null) {
      this.list_val = Thrift.copyList(args.list_val, [null]);
    }
    if (args.map_val !== undefined && args.map_val !== null) {
      this.map_val = Thrift.copyMap(args.map_val, [null]);
    }
    if (args.string_val !== undefined && args.string_val !== null) {
      this.string_val = args.string_val;
    }
    if (args.bool_val !== undefined && args.bool_val !== null) {
      this.bool_val = args.bool_val;
    }
    if (args.double_val !== undefined && args.double_val !== null) {
      this.double_val = args.double_val;
    }
  }
};
Everything.prototype = {};
Everything.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.byte_val = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.i16_val = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.i32_val = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.i64_val = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.set_val = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.set_val.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.list_val = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.list_val.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size14 = 0;
        var _rtmp318;
        this.map_val = {};
        var _ktype15 = 0;
        var _vtype16 = 0;
        _rtmp318 = input.readMapBegin();
        _ktype15 = _rtmp318.ktype;
        _vtype16 = _rtmp318.vtype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var key20 = null;
          var val21 = null;
          key20 = input.readString();
          val21 = input.readString();
          this.map_val[key20] = val21;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.string_val = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.bool_val = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.double_val = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Everything.prototype.write = function(output) {
  output.writeStructBegin('Everything');
  if (this.byte_val !== null && this.byte_val !== undefined) {
    output.writeFieldBegin('byte_val', Thrift.Type.BYTE, 1);
    output.writeByte(this.byte_val);
    output.writeFieldEnd();
  }
  if (this.i16_val !== null && this.i16_val !== undefined) {
    output.writeFieldBegin('i16_val', Thrift.Type.I16, 2);
    output.writeI16(this.i16_val);
    output.writeFieldEnd();
  }
  if (this.i32_val !== null && this.i32_val !== undefined) {
    output.writeFieldBegin('i32_val', Thrift.Type.I32, 3);
    output.writeI32(this.i32_val);
    output.writeFieldEnd();
  }
  if (this.i64_val !== null && this.i64_val !== undefined) {
    output.writeFieldBegin('i64_val', Thrift.Type.I64, 4);
    output.writeI64(this.i64_val);
    output.writeFieldEnd();
  }
  if (this.set_val !== null && this.set_val !== undefined) {
    output.writeFieldBegin('set_val', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.set_val.length);
    for (var iter22 in this.set_val)
    {
      if (this.set_val.hasOwnProperty(iter22))
      {
        iter22 = this.set_val[iter22];
        output.writeString(iter22);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.list_val !== null && this.list_val !== undefined) {
    output.writeFieldBegin('list_val', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.list_val.length);
    for (var iter23 in this.list_val)
    {
      if (this.list_val.hasOwnProperty(iter23))
      {
        iter23 = this.list_val[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.map_val !== null && this.map_val !== undefined) {
    output.writeFieldBegin('map_val', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.map_val));
    for (var kiter24 in this.map_val)
    {
      if (this.map_val.hasOwnProperty(kiter24))
      {
        var viter25 = this.map_val[kiter24];
        output.writeString(kiter24);
        output.writeString(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.string_val !== null && this.string_val !== undefined) {
    output.writeFieldBegin('string_val', Thrift.Type.STRING, 8);
    output.writeString(this.string_val);
    output.writeFieldEnd();
  }
  if (this.bool_val !== null && this.bool_val !== undefined) {
    output.writeFieldBegin('bool_val', Thrift.Type.BOOL, 9);
    output.writeBool(this.bool_val);
    output.writeFieldEnd();
  }
  if (this.double_val !== null && this.double_val !== undefined) {
    output.writeFieldBegin('double_val', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.double_val);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

